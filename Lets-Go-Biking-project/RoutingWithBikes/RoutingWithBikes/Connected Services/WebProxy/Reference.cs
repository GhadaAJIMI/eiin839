//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoutingWithBikes.WebProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebProxy.IRoutingService")]
    public interface IRoutingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/getListeContrats", ReplyAction="http://tempuri.org/IRoutingService/getListeContratsResponse")]
        string getListeContrats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/getListeContrats", ReplyAction="http://tempuri.org/IRoutingService/getListeContratsResponse")]
        System.Threading.Tasks.Task<string> getListeContratsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/getListeStations", ReplyAction="http://tempuri.org/IRoutingService/getListeStationsResponse")]
        string getListeStations(string contrat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/getListeStations", ReplyAction="http://tempuri.org/IRoutingService/getListeStationsResponse")]
        System.Threading.Tasks.Task<string> getListeStationsAsync(string contrat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/getAllStations", ReplyAction="http://tempuri.org/IRoutingService/getAllStationsResponse")]
        string getAllStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/getAllStations", ReplyAction="http://tempuri.org/IRoutingService/getAllStationsResponse")]
        System.Threading.Tasks.Task<string> getAllStationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/getStationInfo", ReplyAction="http://tempuri.org/IRoutingService/getStationInfoResponse")]
        string getStationInfo(string contrat, string num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingService/getStationInfo", ReplyAction="http://tempuri.org/IRoutingService/getStationInfoResponse")]
        System.Threading.Tasks.Task<string> getStationInfoAsync(string contrat, string num);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoutingServiceChannel : RoutingWithBikes.WebProxy.IRoutingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoutingServiceClient : System.ServiceModel.ClientBase<RoutingWithBikes.WebProxy.IRoutingService>, RoutingWithBikes.WebProxy.IRoutingService {
        
        public RoutingServiceClient() {
        }
        
        public RoutingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoutingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoutingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoutingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string getListeContrats() {
            return base.Channel.getListeContrats();
        }
        
        public System.Threading.Tasks.Task<string> getListeContratsAsync() {
            return base.Channel.getListeContratsAsync();
        }
        
        public string getListeStations(string contrat) {
            return base.Channel.getListeStations(contrat);
        }
        
        public System.Threading.Tasks.Task<string> getListeStationsAsync(string contrat) {
            return base.Channel.getListeStationsAsync(contrat);
        }
        
        public string getAllStations() {
            return base.Channel.getAllStations();
        }
        
        public System.Threading.Tasks.Task<string> getAllStationsAsync() {
            return base.Channel.getAllStationsAsync();
        }
        
        public string getStationInfo(string contrat, string num) {
            return base.Channel.getStationInfo(contrat, num);
        }
        
        public System.Threading.Tasks.Task<string> getStationInfoAsync(string contrat, string num) {
            return base.Channel.getStationInfoAsync(contrat, num);
        }
    }
}
